/**
 * @module botframework-expressions
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Generated from ../Expression.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ExpressionLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly NUMBER = 24;
	public static readonly WHITESPACE = 25;
	public static readonly IDENTIFIER = 26;
	public static readonly NEWLINE = 27;
	public static readonly STRING = 28;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 29;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "LETTER", "DIGIT", 
		"NUMBER", "WHITESPACE", "IDENTIFIER", "NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'!'", "'-'", "'+'", "'^'", "'*'", "'/'", "'%'", "'=='", "'!='", 
		"'<>'", "'&'", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'('", "')'", 
		"'.'", "'['", "']'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "NUMBER", "WHITESPACE", "IDENTIFIER", 
		"NEWLINE", "STRING", "INVALID_TOKEN_DEFAULT_MODE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ExpressionLexer._LITERAL_NAMES, ExpressionLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ExpressionLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ExpressionLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Expression.g4"; }

	// @Override
	public get ruleNames(): string[] { return ExpressionLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ExpressionLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return ExpressionLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x1F\xB5\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03" +
		"\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03" +
		"\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x06\x1B|" +
		"\n\x1B\r\x1B\x0E\x1B}\x03\x1B\x03\x1B\x06\x1B\x82\n\x1B\r\x1B\x0E\x1B" +
		"\x83\x05\x1B\x86\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x05\x1D\x91\n\x1D\x03\x1D\x03\x1D\x03\x1D\x07" +
		"\x1D\x96\n\x1D\f\x1D\x0E\x1D\x99\v\x1D\x03\x1E\x05\x1E\x9C\n\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x07\x1F\xA4\n\x1F\f\x1F\x0E\x1F" +
		"\xA7\v\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\xAC\n\x1F\f\x1F\x0E\x1F\xAF" +
		"\v\x1F\x03\x1F\x05\x1F\xB2\n\x1F\x03 \x03 \x02\x02\x02!\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02" +
		"\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/" +
		"\x02\x191\x02\x023\x02\x025\x02\x1A7\x02\x1B9\x02\x1C;\x02\x1D=\x02\x1E" +
		"?\x02\x1F\x03\x02\t\x04\x02C\\c|\x03\x022;\x06\x02\v\v\"\"\xA2\xA2\uFF01" +
		"\uFF01\x05\x02%%BBaa\x04\x02//aa\x03\x02))\x03\x02$$\xBF\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x03A\x03" +
		"\x02\x02\x02\x05C\x03\x02\x02\x02\x07E\x03\x02\x02\x02\tG\x03\x02\x02" +
		"\x02\vI\x03\x02\x02\x02\rK\x03\x02\x02\x02\x0FM\x03\x02\x02\x02\x11O\x03" +
		"\x02\x02\x02\x13R\x03\x02\x02\x02\x15U\x03\x02\x02\x02\x17X\x03\x02\x02" +
		"\x02\x19Z\x03\x02\x02\x02\x1B\\\x03\x02\x02\x02\x1D_\x03\x02\x02\x02\x1F" +
		"a\x03\x02\x02\x02!d\x03\x02\x02\x02#g\x03\x02\x02\x02%j\x03\x02\x02\x02" +
		"\'l\x03\x02\x02\x02)n\x03\x02\x02\x02+p\x03\x02\x02\x02-r\x03\x02\x02" +
		"\x02/t\x03\x02\x02\x021v\x03\x02\x02\x023x\x03\x02\x02\x025{\x03\x02\x02" +
		"\x027\x87\x03\x02\x02\x029\x90\x03\x02\x02\x02;\x9B\x03\x02\x02\x02=\xB1" +
		"\x03\x02\x02\x02?\xB3\x03\x02\x02\x02AB\x07#\x02\x02B\x04\x03\x02\x02" +
		"\x02CD\x07/\x02\x02D\x06\x03\x02\x02\x02EF\x07-\x02\x02F\b\x03\x02\x02" +
		"\x02GH\x07`\x02\x02H\n\x03\x02\x02\x02IJ\x07,\x02\x02J\f\x03\x02\x02\x02" +
		"KL\x071\x02\x02L\x0E\x03\x02\x02\x02MN\x07\'\x02\x02N\x10\x03\x02\x02" +
		"\x02OP\x07?\x02\x02PQ\x07?\x02\x02Q\x12\x03\x02\x02\x02RS\x07#\x02\x02" +
		"ST\x07?\x02\x02T\x14\x03\x02\x02\x02UV\x07>\x02\x02VW\x07@\x02\x02W\x16" +
		"\x03\x02\x02\x02XY\x07(\x02\x02Y\x18\x03\x02\x02\x02Z[\x07>\x02\x02[\x1A" +
		"\x03\x02\x02\x02\\]\x07>\x02\x02]^\x07?\x02\x02^\x1C\x03\x02\x02\x02_" +
		"`\x07@\x02\x02`\x1E\x03\x02\x02\x02ab\x07@\x02\x02bc\x07?\x02\x02c \x03" +
		"\x02\x02\x02de\x07(\x02\x02ef\x07(\x02\x02f\"\x03\x02\x02\x02gh\x07~\x02" +
		"\x02hi\x07~\x02\x02i$\x03\x02\x02\x02jk\x07*\x02\x02k&\x03\x02\x02\x02" +
		"lm\x07+\x02\x02m(\x03\x02\x02\x02no\x070\x02\x02o*\x03\x02\x02\x02pq\x07" +
		"]\x02\x02q,\x03\x02\x02\x02rs\x07_\x02\x02s.\x03\x02\x02\x02tu\x07.\x02" +
		"\x02u0\x03\x02\x02\x02vw\t\x02\x02\x02w2\x03\x02\x02\x02xy\t\x03\x02\x02" +
		"y4\x03\x02\x02\x02z|\x053\x1A\x02{z\x03\x02\x02\x02|}\x03\x02\x02\x02" +
		"}{\x03\x02\x02\x02}~\x03\x02\x02\x02~\x85\x03\x02\x02\x02\x7F\x81\x07" +
		"0\x02\x02\x80\x82\x053\x1A\x02\x81\x80\x03\x02\x02\x02\x82\x83\x03\x02" +
		"\x02\x02\x83\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\x86\x03\x02" +
		"\x02\x02\x85\x7F\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x866\x03\x02" +
		"\x02\x02\x87\x88\t\x04\x02\x02\x88\x89\x03\x02\x02\x02\x89\x8A\b\x1C\x02" +
		"\x02\x8A8\x03\x02\x02\x02\x8B\x91\x051\x19\x02\x8C\x91\t\x05\x02\x02\x8D" +
		"\x8E\x07B\x02\x02\x8E\x91\x07B\x02\x02\x8F\x91\x04&\'\x02\x90\x8B\x03" +
		"\x02\x02\x02\x90\x8C\x03\x02\x02\x02\x90\x8D\x03\x02\x02\x02\x90\x8F\x03" +
		"\x02\x02\x02\x91\x97\x03\x02\x02\x02\x92\x96\x051\x19\x02\x93\x96\x05" +
		"3\x1A\x02\x94\x96\t\x06\x02\x02\x95\x92\x03\x02\x02\x02\x95\x93\x03\x02" +
		"\x02\x02\x95\x94\x03\x02\x02\x02\x96\x99\x03\x02\x02\x02\x97\x95\x03\x02" +
		"\x02\x02\x97\x98\x03\x02\x02\x02\x98:\x03\x02\x02\x02\x99\x97\x03\x02" +
		"\x02\x02\x9A\x9C\x07\x0F\x02\x02\x9B\x9A\x03\x02\x02\x02\x9B\x9C\x03\x02" +
		"\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9E\x07\f\x02\x02\x9E\x9F\x03\x02" +
		"\x02\x02\x9F\xA0\b\x1E\x02\x02\xA0<\x03\x02\x02\x02\xA1\xA5\x07)\x02\x02" +
		"\xA2\xA4\n\x07\x02\x02\xA3\xA2\x03\x02\x02\x02\xA4\xA7\x03\x02\x02\x02" +
		"\xA5\xA3\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA8\x03\x02\x02\x02" +
		"\xA7\xA5\x03\x02\x02\x02\xA8\xB2\x07)\x02\x02\xA9\xAD\x07$\x02\x02\xAA" +
		"\xAC\n\b\x02\x02\xAB\xAA\x03\x02\x02\x02\xAC\xAF\x03\x02\x02\x02\xAD\xAB" +
		"\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAE\xB0\x03\x02\x02\x02\xAF\xAD" +
		"\x03\x02\x02\x02\xB0\xB2\x07$\x02\x02\xB1\xA1\x03\x02\x02\x02\xB1\xA9" +
		"\x03\x02\x02\x02\xB2>\x03\x02\x02\x02\xB3\xB4\v\x02\x02\x02\xB4@\x03\x02" +
		"\x02\x02\r\x02}\x83\x85\x90\x95\x97\x9B\xA5\xAD\xB1\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExpressionLexer.__ATN) {
			ExpressionLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ExpressionLexer._serializedATN));
		}

		return ExpressionLexer.__ATN;
	}

}

