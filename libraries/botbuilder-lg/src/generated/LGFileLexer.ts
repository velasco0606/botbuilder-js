/**
 * @module botbuilder-lg
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
// Generated from ../LGFileLexer.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LGFileLexer extends Lexer {
	public static readonly COMMENTS = 1;
	public static readonly WS = 2;
	public static readonly NEWLINE = 3;
	public static readonly HASH = 4;
	public static readonly DASH = 5;
	public static readonly LEFT_SQUARE_BRACKET = 6;
	public static readonly RIGHT_SQUARE_BRACKET = 7;
	public static readonly IMPORT_DESC = 8;
	public static readonly IMPORT_PATH = 9;
	public static readonly INVALID_TOKEN_DEFAULT_MODE = 10;
	public static readonly WS_IN_NAME = 11;
	public static readonly IDENTIFIER = 12;
	public static readonly DOT = 13;
	public static readonly OPEN_PARENTHESIS = 14;
	public static readonly CLOSE_PARENTHESIS = 15;
	public static readonly COMMA = 16;
	public static readonly TEXT_IN_NAME = 17;
	public static readonly WS_IN_BODY_IGNORED = 18;
	public static readonly MULTILINE_PREFIX = 19;
	public static readonly IF = 20;
	public static readonly ELSEIF = 21;
	public static readonly ELSE = 22;
	public static readonly SWITCH = 23;
	public static readonly CASE = 24;
	public static readonly DEFAULT = 25;
	public static readonly ESCAPE_CHARACTER = 26;
	public static readonly EXPRESSION = 27;
	public static readonly TEXT = 28;
	public static readonly WS_IN_STRUCTURED = 29;
	public static readonly STRUCTURED_COMMENTS = 30;
	public static readonly STRUCTURED_NEWLINE = 31;
	public static readonly STRUCTURED_TEMPLATE_BODY_END = 32;
	public static readonly STRUCTURED_CONTENT = 33;
	public static readonly MULTILINE_SUFFIX = 34;
	public static readonly TEMPLATE_NAME_MODE = 1;
	public static readonly TEMPLATE_BODY_MODE = 2;
	public static readonly STRUCTURED_TEMPLATE_BODY_MODE = 3;
	public static readonly MULTILINE = 4;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE", "TEMPLATE_NAME_MODE", "TEMPLATE_BODY_MODE", "STRUCTURED_TEMPLATE_BODY_MODE", 
		"MULTILINE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "NUMBER", "WHITESPACE", "A", "C", "D", "E", "F", "H", "I", "L", 
		"S", "T", "U", "W", "STRING_LITERAL", "EXPRESSION_FRAGMENT", "ESCAPE_CHARACTER_FRAGMENT", 
		"COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "LEFT_SQUARE_BRACKET", "RIGHT_SQUARE_BRACKET", 
		"IMPORT_DESC", "IMPORT_PATH", "INVALID_TOKEN_DEFAULT_MODE", "WS_IN_NAME", 
		"NEWLINE_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "TEXT_IN_NAME", "WS_IN_BODY_IGNORED", "WS_IN_BODY", "MULTILINE_PREFIX", 
		"NEWLINE_IN_BODY", "IF", "ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", 
		"ESCAPE_CHARACTER", "EXPRESSION", "TEXT", "WS_IN_STRUCTURED", "STRUCTURED_COMMENTS", 
		"STRUCTURED_NEWLINE", "STRUCTURED_TEMPLATE_BODY_END", "STRUCTURED_CONTENT", 
		"MULTILINE_SUFFIX", "MULTILINE_ESCAPE_CHARACTER", "MULTILINE_EXPRESSION", 
		"MULTILINE_TEXT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'#'", undefined, "'['", "']'", 
		undefined, undefined, undefined, undefined, undefined, "'.'", "'('", "')'", 
		"','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "COMMENTS", "WS", "NEWLINE", "HASH", "DASH", "LEFT_SQUARE_BRACKET", 
		"RIGHT_SQUARE_BRACKET", "IMPORT_DESC", "IMPORT_PATH", "INVALID_TOKEN_DEFAULT_MODE", 
		"WS_IN_NAME", "IDENTIFIER", "DOT", "OPEN_PARENTHESIS", "CLOSE_PARENTHESIS", 
		"COMMA", "TEXT_IN_NAME", "WS_IN_BODY_IGNORED", "MULTILINE_PREFIX", "IF", 
		"ELSEIF", "ELSE", "SWITCH", "CASE", "DEFAULT", "ESCAPE_CHARACTER", "EXPRESSION", 
		"TEXT", "WS_IN_STRUCTURED", "STRUCTURED_COMMENTS", "STRUCTURED_NEWLINE", 
		"STRUCTURED_TEMPLATE_BODY_END", "STRUCTURED_CONTENT", "MULTILINE_SUFFIX",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LGFileLexer._LITERAL_NAMES, LGFileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LGFileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	  ignoreWS = true;             // usually we ignore whitespace, but inside template, whitespace is significant
	  expectKeywords = false;        // whether we are expecting IF/ELSEIF/ELSE or Switch/Case/Default keywords


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LGFileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LGFileLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LGFileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LGFileLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return LGFileLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 22:
			this.DASH_action(_localctx, actionIndex);
			break;

		case 39:
			this.NEWLINE_IN_BODY_action(_localctx, actionIndex);
			break;

		case 40:
			this.IF_action(_localctx, actionIndex);
			break;

		case 41:
			this.ELSEIF_action(_localctx, actionIndex);
			break;

		case 42:
			this.ELSE_action(_localctx, actionIndex);
			break;

		case 43:
			this.SWITCH_action(_localctx, actionIndex);
			break;

		case 44:
			this.CASE_action(_localctx, actionIndex);
			break;

		case 45:
			this.DEFAULT_action(_localctx, actionIndex);
			break;

		case 46:
			this.ESCAPE_CHARACTER_action(_localctx, actionIndex);
			break;

		case 47:
			this.EXPRESSION_action(_localctx, actionIndex);
			break;

		case 48:
			this.TEXT_action(_localctx, actionIndex);
			break;
		}
	}
	private DASH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.expectKeywords = true;
			break;
		}
	}
	private NEWLINE_IN_BODY_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.ignoreWS = true;
			break;
		}
	}
	private IF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSEIF_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			 this.ignoreWS = true;
			break;
		}
	}
	private ELSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			 this.ignoreWS = true;
			break;
		}
	}
	private SWITCH_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.ignoreWS = true;
			break;
		}
	}
	private CASE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.ignoreWS = true;
			break;
		}
	}
	private DEFAULT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 7:
			 this.ignoreWS = true;
			break;
		}
	}
	private ESCAPE_CHARACTER_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 8:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private EXPRESSION_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 9:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	private TEXT_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 10:
			 this.ignoreWS = false; this.expectKeywords = false;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 36:
			return this.WS_IN_BODY_IGNORED_sempred(_localctx, predIndex);

		case 40:
			return this.IF_sempred(_localctx, predIndex);

		case 41:
			return this.ELSEIF_sempred(_localctx, predIndex);

		case 42:
			return this.ELSE_sempred(_localctx, predIndex);

		case 43:
			return this.SWITCH_sempred(_localctx, predIndex);

		case 44:
			return this.CASE_sempred(_localctx, predIndex);

		case 45:
			return this.DEFAULT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private WS_IN_BODY_IGNORED_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.ignoreWS;
		}
		return true;
	}
	private IF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return this.expectKeywords;
		}
		return true;
	}
	private ELSEIF_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 2:
			return this.expectKeywords;
		}
		return true;
	}
	private ELSE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 3:
			return this.expectKeywords;
		}
		return true;
	}
	private SWITCH_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 4:
			return this.expectKeywords;
		}
		return true;
	}
	private CASE_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 5:
			return this.expectKeywords;
		}
		return true;
	}
	private DEFAULT_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 6:
			return this.expectKeywords;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02$\u01E7\b\x01" +
		"\b\x01\b\x01\b\x01\b\x01\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04" +
		"\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04" +
		"\v\t\v\x04\f\t\f\x04\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04" +
		"\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04" +
		"\x16\t\x16\x04\x17\t\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04" +
		"\x1B\t\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04" +
		" \t \x04!\t!\x04\"\t\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(" +
		"\t(\x04)\t)\x04*\t*\x04+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x04" +
		"1\t1\x042\t2\x043\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04" +
		":\t:\x04;\t;\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03" +
		"\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x07\x11\x9C\n\x11\f\x11\x0E\x11\x9F\v" +
		"\x11\x03\x11\x03\x11\x03\x11\x07\x11\xA4\n\x11\f\x11\x0E\x11\xA7\v\x11" +
		"\x03\x11\x05\x11\xAA\n\x11\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\xB0" +
		"\n\x12\f\x12\x0E\x12\xB3\v\x12\x03\x12\x03\x12\x03\x13\x03\x13\x05\x13" +
		"\xB9\n\x13\x03\x14\x03\x14\x06\x14\xBD\n\x14\r\x14\x0E\x14\xBE\x03\x14" +
		"\x05\x14\xC2\n\x14\x03\x14\x03\x14\x03\x15\x06\x15\xC7\n\x15\r\x15\x0E" +
		"\x15\xC8\x03\x15\x03\x15\x03\x16\x05\x16\xCE\n\x16\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x07\x1B\xE3" +
		"\n\x1B\f\x1B\x0E\x1B\xE6\v\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C" +
		"\xEC\n\x1C\f\x1C\x0E\x1C\xEF\v\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03" +
		"\x1E\x06\x1E\xF6\n\x1E\r\x1E\x0E\x1E\xF7\x03\x1E\x03\x1E\x03\x1F\x05\x1F" +
		"\xFD\n\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x05" +
		" \u0107\n \x03 \x03 \x03 \x07 \u010C\n \f \x0E \u010F\v \x03!\x03!\x03" +
		"\"\x03\"\x03#\x03#\x03$\x03$\x03%\x06%\u011A\n%\r%\x0E%\u011B\x03&\x06" +
		"&\u011F\n&\r&\x0E&\u0120\x03&\x03&\x03&\x03&\x03\'\x06\'\u0128\n\'\r\'" +
		"\x0E\'\u0129\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x03(\x03)\x05)\u0135" +
		"\n)\x03)\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x07*\u0140\n*\f*\x0E" +
		"*\u0143\v*\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x03+\x07+\u014E\n+" +
		"\f+\x0E+\u0151\v+\x03+\x03+\x03+\x07+\u0156\n+\f+\x0E+\u0159\v+\x03+\x03" +
		"+\x03+\x03+\x03,\x03,\x03,\x03,\x03,\x07,\u0164\n,\f,\x0E,\u0167\v,\x03" +
		",\x03,\x03,\x03,\x03-\x03-\x03-\x03-\x03-\x03-\x03-\x07-\u0174\n-\f-\x0E" +
		"-\u0177\v-\x03-\x03-\x03-\x03-\x03.\x03.\x03.\x03.\x03.\x07.\u0182\n." +
		"\f.\x0E.\u0185\v.\x03.\x03.\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03" +
		"/\x03/\x07/\u0193\n/\f/\x0E/\u0196\v/\x03/\x03/\x03/\x03/\x030\x030\x03" +
		"0\x031\x031\x031\x032\x062\u01A3\n2\r2\x0E2\u01A4\x032\x032\x033\x063" +
		"\u01AA\n3\r3\x0E3\u01AB\x034\x034\x074\u01B0\n4\f4\x0E4\u01B3\v4\x034" +
		"\x054\u01B6\n4\x034\x034\x034\x034\x035\x055\u01BD\n5\x035\x035\x036\x05" +
		"6\u01C2\n6\x036\x036\x056\u01C6\n6\x036\x036\x037\x067\u01CB\n7\r7\x0E" +
		"7\u01CC\x038\x038\x038\x038\x038\x038\x039\x039\x039\x039\x03:\x03:\x03" +
		":\x03:\x03;\x05;\u01DE\n;\x03;\x03;\x06;\u01E2\n;\r;\x0E;\u01E3\x03;\x03" +
		";\b\xB1\xE4\xED\u011B\u01A4\u01E3\x02\x02<\x07\x02\x02\t\x02\x02\v\x02" +
		"\x02\r\x02\x02\x0F\x02\x02\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02" +
		"\x02\x19\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02" +
		"%\x02\x02\'\x02\x02)\x02\x02+\x02\x03-\x02\x04/\x02\x051\x02\x063\x02" +
		"\x075\x02\b7\x02\t9\x02\n;\x02\v=\x02\f?\x02\rA\x02\x02C\x02\x0EE\x02" +
		"\x0FG\x02\x10I\x02\x11K\x02\x12M\x02\x13O\x02\x14Q\x02\x02S\x02\x15U\x02" +
		"\x02W\x02\x16Y\x02\x17[\x02\x18]\x02\x19_\x02\x1Aa\x02\x1Bc\x02\x1Ce\x02" +
		"\x1Dg\x02\x1Ei\x02\x1Fk\x02 m\x02!o\x02\"q\x02#s\x02$u\x02\x02w\x02\x02" +
		"y\x02\x02\x07\x02\x03\x04\x05\x06\x16\x04\x02C\\c|\x06\x02\v\v\"\"\xA2" +
		"\xA2\uFF01\uFF01\x04\x02CCcc\x04\x02EEee\x04\x02FFff\x04\x02GGgg\x04\x02" +
		"HHhh\x04\x02JJjj\x04\x02KKkk\x04\x02NNnn\x04\x02UUuu\x04\x02VVvv\x04\x02" +
		"WWww\x04\x02YYyy\x05\x02\f\f\x0F\x0F))\x05\x02\f\f\x0F\x0F$$\b\x02\f\f" +
		"\x0F\x0F$$))}}\x7F\x7F\x04\x02\f\f\x0F\x0F\x04\x02&&@@\x04\x02//aa\u01F9" +
		"\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02" +
		"\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x03" +
		"?\x03\x02\x02\x02\x03A\x03\x02\x02\x02\x03C\x03\x02\x02\x02\x03E\x03\x02" +
		"\x02\x02\x03G\x03\x02\x02\x02\x03I\x03\x02\x02\x02\x03K\x03\x02\x02\x02" +
		"\x03M\x03\x02\x02\x02\x04O\x03\x02\x02\x02\x04Q\x03\x02\x02\x02\x04S\x03" +
		"\x02\x02\x02\x04U\x03\x02\x02\x02\x04W\x03\x02\x02\x02\x04Y\x03\x02\x02" +
		"\x02\x04[\x03\x02\x02\x02\x04]\x03\x02\x02\x02\x04_\x03\x02\x02\x02\x04" +
		"a\x03\x02\x02\x02\x04c\x03\x02\x02\x02\x04e\x03\x02\x02\x02\x04g\x03\x02" +
		"\x02\x02\x05i\x03\x02\x02\x02\x05k\x03\x02\x02\x02\x05m\x03\x02\x02\x02" +
		"\x05o\x03\x02\x02\x02\x05q\x03\x02\x02\x02\x06s\x03\x02\x02\x02\x06u\x03" +
		"\x02\x02\x02\x06w\x03\x02\x02\x02\x06y\x03\x02\x02\x02\x07{\x03\x02\x02" +
		"\x02\t}\x03\x02\x02\x02\v\x7F\x03\x02\x02\x02\r\x81\x03\x02\x02\x02\x0F" +
		"\x83\x03\x02\x02\x02\x11\x85\x03\x02\x02\x02\x13\x87\x03\x02\x02\x02\x15" +
		"\x89\x03\x02\x02\x02\x17\x8B\x03\x02\x02\x02\x19\x8D\x03\x02\x02\x02\x1B" +
		"\x8F\x03\x02\x02\x02\x1D\x91\x03\x02\x02\x02\x1F\x93\x03\x02\x02\x02!" +
		"\x95\x03\x02\x02\x02#\x97\x03\x02\x02\x02%\xA9\x03\x02\x02\x02\'\xAB\x03" +
		"\x02\x02\x02)\xB6\x03\x02\x02\x02+\xBA\x03\x02\x02\x02-\xC6\x03\x02\x02" +
		"\x02/\xCD\x03\x02\x02\x021\xD1\x03\x02\x02\x023\xD5\x03\x02\x02\x025\xDA" +
		"\x03\x02\x02\x027\xDE\x03\x02\x02\x029\xE0\x03\x02\x02\x02;\xE9\x03\x02" +
		"\x02\x02=\xF2\x03\x02\x02\x02?\xF5\x03\x02\x02\x02A\xFC\x03\x02\x02\x02" +
		"C\u0106\x03\x02\x02\x02E\u0110\x03\x02\x02\x02G\u0112\x03\x02\x02\x02" +
		"I\u0114\x03\x02\x02\x02K\u0116\x03\x02\x02\x02M\u0119\x03\x02\x02\x02" +
		"O\u011E\x03\x02\x02\x02Q\u0127\x03\x02\x02\x02S\u012D\x03\x02\x02\x02" +
		"U\u0134\x03\x02\x02\x02W\u013C\x03\x02\x02\x02Y\u0148\x03\x02\x02\x02" +
		"[\u015E\x03\x02\x02\x02]\u016C\x03\x02\x02\x02_\u017C\x03\x02\x02\x02" +
		"a\u018A\x03\x02\x02\x02c\u019B\x03\x02\x02\x02e\u019E\x03\x02\x02\x02" +
		"g\u01A2\x03\x02\x02\x02i\u01A9\x03\x02\x02\x02k\u01AD\x03\x02\x02\x02" +
		"m\u01BC\x03\x02\x02\x02o\u01C1\x03\x02\x02\x02q\u01CA\x03\x02\x02\x02" +
		"s\u01CE\x03\x02\x02\x02u\u01D4\x03\x02\x02\x02w\u01D8\x03\x02\x02\x02" +
		"y\u01E1\x03\x02\x02\x02{|\t\x02\x02\x02|\b\x03\x02\x02\x02}~\x042;\x02" +
		"~\n\x03\x02\x02\x02\x7F\x80\t\x03\x02\x02\x80\f\x03\x02\x02\x02\x81\x82" +
		"\t\x04\x02\x02\x82\x0E\x03\x02\x02\x02\x83\x84\t\x05\x02\x02\x84\x10\x03" +
		"\x02\x02\x02\x85\x86\t\x06\x02\x02\x86\x12\x03\x02\x02\x02\x87\x88\t\x07" +
		"\x02\x02\x88\x14\x03\x02\x02\x02\x89\x8A\t\b\x02\x02\x8A\x16\x03\x02\x02" +
		"\x02\x8B\x8C\t\t\x02\x02\x8C\x18\x03\x02\x02\x02\x8D\x8E\t\n\x02\x02\x8E" +
		"\x1A\x03\x02\x02\x02\x8F\x90\t\v\x02\x02\x90\x1C\x03\x02\x02\x02\x91\x92" +
		"\t\f\x02\x02\x92\x1E\x03\x02\x02\x02\x93\x94\t\r\x02\x02\x94 \x03\x02" +
		"\x02\x02\x95\x96\t\x0E\x02\x02\x96\"\x03\x02\x02\x02\x97\x98\t\x0F\x02" +
		"\x02\x98$\x03\x02\x02\x02\x99\x9D\x07)\x02\x02\x9A\x9C\n\x10\x02\x02\x9B" +
		"\x9A\x03\x02\x02\x02\x9C\x9F\x03\x02\x02\x02\x9D\x9B\x03\x02\x02\x02\x9D" +
		"\x9E\x03\x02\x02\x02\x9E\xA0\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\xA0" +
		"\xAA\x07)\x02\x02\xA1\xA5\x07$\x02\x02\xA2\xA4\n\x11\x02\x02\xA3\xA2\x03" +
		"\x02\x02\x02\xA4\xA7\x03\x02\x02\x02\xA5\xA3\x03\x02\x02\x02\xA5\xA6\x03" +
		"\x02\x02\x02\xA6\xA8\x03\x02\x02\x02\xA7\xA5\x03\x02\x02\x02\xA8\xAA\x07" +
		"$\x02\x02\xA9\x99\x03\x02\x02\x02\xA9\xA1\x03\x02\x02\x02\xAA&\x03\x02" +
		"\x02\x02\xAB\xAC\x07B\x02\x02\xAC\xB1\x07}\x02\x02\xAD\xB0\x05%\x11\x02" +
		"\xAE\xB0\n\x12\x02\x02\xAF\xAD\x03\x02\x02\x02\xAF\xAE\x03\x02\x02\x02" +
		"\xB0\xB3\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB1\xAF\x03\x02\x02\x02" +
		"\xB2\xB4\x03\x02\x02\x02\xB3\xB1\x03\x02\x02\x02\xB4\xB5\x07\x7F\x02\x02" +
		"\xB5(\x03\x02\x02\x02\xB6\xB8\x07^\x02\x02\xB7\xB9\n\x13\x02\x02\xB8\xB7" +
		"\x03\x02\x02\x02\xB8\xB9\x03\x02\x02\x02\xB9*\x03\x02\x02\x02\xBA\xBC" +
		"\t\x14\x02\x02\xBB\xBD\n\x13\x02\x02\xBC\xBB\x03\x02\x02\x02\xBD\xBE\x03" +
		"\x02\x02\x02\xBE\xBC\x03\x02\x02\x02\xBE\xBF\x03\x02\x02\x02\xBF\xC1\x03" +
		"\x02\x02\x02\xC0\xC2\x05/\x16\x02\xC1\xC0\x03\x02\x02\x02\xC1\xC2\x03" +
		"\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC4\b\x14\x02\x02\xC4,\x03\x02" +
		"\x02\x02\xC5\xC7\x05\v\x04\x02\xC6\xC5\x03\x02\x02\x02\xC7\xC8\x03\x02" +
		"\x02\x02\xC8\xC6\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9\xCA\x03\x02" +
		"\x02\x02\xCA\xCB\b\x15\x02\x02\xCB.\x03\x02\x02\x02\xCC\xCE\x07\x0F\x02" +
		"\x02\xCD\xCC\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE\xCF\x03\x02\x02" +
		"\x02\xCF\xD0\x07\f\x02\x02\xD00\x03\x02\x02\x02\xD1\xD2\x07%\x02\x02\xD2" +
		"\xD3\x03\x02\x02\x02\xD3\xD4\b\x17\x03\x02\xD42\x03\x02\x02\x02\xD5\xD6" +
		"\x07/\x02\x02\xD6\xD7\b\x18\x04\x02\xD7\xD8\x03\x02\x02\x02\xD8\xD9\b" +
		"\x18\x05\x02\xD94\x03\x02\x02\x02\xDA\xDB\x07]\x02\x02\xDB\xDC\x03\x02" +
		"\x02\x02\xDC\xDD\b\x19\x06\x02\xDD6\x03\x02\x02\x02\xDE\xDF\x07_\x02\x02" +
		"\xDF8\x03\x02\x02\x02\xE0\xE4\x07]\x02\x02\xE1\xE3\n\x13\x02\x02\xE2\xE1" +
		"\x03\x02\x02\x02\xE3\xE6\x03\x02\x02\x02\xE4\xE5\x03\x02\x02\x02\xE4\xE2" +
		"\x03\x02\x02\x02\xE5\xE7\x03\x02\x02\x02\xE6\xE4\x03\x02\x02\x02\xE7\xE8" +
		"\x07_\x02\x02\xE8:\x03\x02\x02\x02\xE9\xED\x07*\x02\x02\xEA\xEC\n\x13" +
		"\x02\x02\xEB\xEA\x03\x02\x02\x02\xEC\xEF\x03\x02\x02\x02\xED\xEE\x03\x02" +
		"\x02\x02\xED\xEB\x03\x02\x02\x02\xEE\xF0\x03\x02\x02\x02\xEF\xED\x03\x02" +
		"\x02\x02\xF0\xF1\x07+\x02\x02\xF1<\x03\x02\x02\x02\xF2\xF3\v\x02\x02\x02" +
		"\xF3>\x03\x02\x02\x02\xF4\xF6\x05\v\x04\x02\xF5\xF4\x03\x02\x02\x02\xF6" +
		"\xF7\x03\x02\x02\x02\xF7\xF5\x03\x02\x02\x02\xF7\xF8\x03\x02\x02\x02\xF8" +
		"\xF9\x03\x02\x02\x02\xF9\xFA\b\x1E\x02\x02\xFA@\x03\x02\x02\x02\xFB\xFD" +
		"\x07\x0F\x02\x02\xFC\xFB\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFE" +
		"\x03\x02\x02\x02\xFE\xFF\x07\f\x02\x02\xFF\u0100\x03\x02\x02\x02\u0100" +
		"\u0101\b\x1F\x07\x02\u0101\u0102\b\x1F\b\x02\u0102B\x03\x02\x02\x02\u0103" +
		"\u0107\x05\x07\x02\x02\u0104\u0107\x05\t\x03\x02\u0105\u0107\x07a\x02" +
		"\x02\u0106\u0103\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0106\u0105" +
		"\x03\x02\x02\x02\u0107\u010D\x03\x02\x02\x02\u0108\u010C\x05\x07\x02\x02" +
		"\u0109\u010C\x05\t\x03\x02\u010A\u010C\t\x15\x02\x02\u010B\u0108\x03\x02" +
		"\x02\x02\u010B\u0109\x03\x02\x02\x02\u010B\u010A\x03\x02\x02\x02\u010C" +
		"\u010F\x03\x02\x02\x02\u010D\u010B\x03\x02\x02\x02\u010D\u010E\x03\x02" +
		"\x02\x02\u010ED\x03\x02\x02\x02\u010F\u010D\x03\x02\x02\x02\u0110\u0111" +
		"\x070\x02\x02\u0111F\x03\x02\x02\x02\u0112\u0113\x07*\x02\x02\u0113H\x03" +
		"\x02\x02\x02\u0114\u0115\x07+\x02\x02\u0115J\x03\x02\x02\x02\u0116\u0117" +
		"\x07.\x02\x02\u0117L\x03\x02\x02\x02\u0118\u011A\n\x13\x02\x02\u0119\u0118" +
		"\x03\x02\x02\x02\u011A\u011B\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02" +
		"\u011B\u0119\x03\x02\x02\x02\u011CN\x03\x02\x02\x02\u011D\u011F\x05\v" +
		"\x04\x02\u011E\u011D\x03\x02\x02\x02\u011F\u0120\x03\x02\x02\x02\u0120" +
		"\u011E\x03\x02\x02\x02\u0120\u0121\x03\x02\x02\x02\u0121\u0122\x03\x02" +
		"\x02\x02\u0122\u0123\x06&\x02\x02\u0123\u0124\x03\x02\x02\x02\u0124\u0125" +
		"\b&\x02\x02\u0125P\x03\x02\x02\x02\u0126\u0128\x05\v\x04\x02\u0127\u0126" +
		"\x03\x02\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129\u0127\x03\x02\x02\x02" +
		"\u0129\u012A\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02\u012B\u012C\b" +
		"\'\t\x02\u012CR\x03\x02\x02\x02\u012D\u012E\x07b\x02\x02\u012E\u012F\x07" +
		"b\x02\x02\u012F\u0130\x07b\x02\x02\u0130\u0131\x03\x02\x02\x02\u0131\u0132" +
		"\b(\n\x02\u0132T\x03\x02\x02\x02\u0133\u0135\x07\x0F\x02\x02\u0134\u0133" +
		"\x03\x02\x02\x02\u0134\u0135\x03\x02\x02\x02\u0135\u0136\x03\x02\x02\x02" +
		"\u0136\u0137\x07\f\x02\x02\u0137\u0138\b)\v\x02\u0138\u0139\x03\x02\x02" +
		"\x02\u0139\u013A\b)\x07\x02\u013A\u013B\b)\b\x02\u013BV\x03\x02\x02\x02" +
		"\u013C\u013D\x05\x19\v\x02\u013D\u0141\x05\x15\t\x02\u013E\u0140\x05\v" +
		"\x04\x02\u013F\u013E\x03\x02\x02\x02\u0140\u0143\x03\x02\x02\x02\u0141" +
		"\u013F\x03\x02\x02\x02\u0141\u0142\x03\x02\x02\x02\u0142\u0144\x03\x02" +
		"\x02\x02\u0143\u0141\x03\x02\x02\x02\u0144\u0145\x07<\x02\x02\u0145\u0146" +
		"\x06*\x03\x02\u0146\u0147\b*\f\x02\u0147X\x03\x02\x02\x02\u0148\u0149" +
		"\x05\x13\b\x02\u0149\u014A\x05\x1B\f\x02\u014A\u014B\x05\x1D\r\x02\u014B" +
		"\u014F\x05\x13\b\x02\u014C\u014E\x05\v\x04\x02\u014D\u014C\x03\x02\x02" +
		"\x02\u014E\u0151\x03\x02\x02\x02\u014F\u014D\x03\x02\x02\x02\u014F\u0150" +
		"\x03\x02\x02\x02\u0150\u0152\x03\x02\x02\x02\u0151\u014F\x03\x02\x02\x02" +
		"\u0152\u0153\x05\x19\v\x02\u0153\u0157\x05\x15\t\x02\u0154\u0156\x05\v" +
		"\x04\x02\u0155\u0154\x03\x02\x02\x02\u0156\u0159\x03\x02\x02\x02\u0157" +
		"\u0155\x03\x02\x02\x02\u0157\u0158\x03\x02\x02\x02\u0158\u015A\x03\x02" +
		"\x02\x02\u0159\u0157\x03\x02\x02\x02\u015A\u015B\x07<\x02\x02\u015B\u015C" +
		"\x06+\x04\x02\u015C\u015D\b+\r\x02\u015DZ\x03\x02\x02\x02\u015E\u015F" +
		"\x05\x13\b\x02\u015F\u0160\x05\x1B\f\x02\u0160\u0161\x05\x1D\r\x02\u0161" +
		"\u0165\x05\x13\b\x02\u0162\u0164\x05\v\x04\x02\u0163\u0162\x03\x02\x02" +
		"\x02\u0164\u0167\x03\x02\x02\x02\u0165\u0163\x03\x02\x02\x02\u0165\u0166" +
		"\x03\x02\x02\x02\u0166\u0168\x03\x02\x02\x02\u0167\u0165\x03\x02\x02\x02" +
		"\u0168\u0169\x07<\x02\x02\u0169\u016A\x06,\x05\x02\u016A\u016B\b,\x0E" +
		"\x02\u016B\\\x03\x02\x02\x02\u016C\u016D\x05\x1D\r\x02\u016D\u016E\x05" +
		"#\x10\x02\u016E\u016F\x05\x19\v\x02\u016F\u0170\x05\x1F\x0E\x02\u0170" +
		"\u0171\x05\x0F\x06\x02\u0171\u0175\x05\x17\n\x02\u0172\u0174\x05\v\x04" +
		"\x02\u0173\u0172\x03\x02\x02\x02\u0174\u0177\x03\x02\x02\x02\u0175\u0173" +
		"\x03\x02\x02\x02\u0175\u0176\x03\x02\x02\x02\u0176\u0178\x03\x02\x02\x02" +
		"\u0177\u0175\x03\x02\x02\x02\u0178\u0179\x07<\x02\x02\u0179\u017A\x06" +
		"-\x06\x02\u017A\u017B\b-\x0F\x02\u017B^\x03\x02\x02\x02\u017C\u017D\x05" +
		"\x0F\x06\x02\u017D\u017E\x05\r\x05\x02\u017E\u017F\x05\x1D\r\x02\u017F" +
		"\u0183\x05\x13\b\x02\u0180\u0182\x05\v\x04\x02\u0181\u0180\x03\x02\x02" +
		"\x02\u0182\u0185\x03\x02\x02\x02\u0183\u0181\x03\x02\x02\x02\u0183\u0184" +
		"\x03\x02\x02\x02\u0184\u0186\x03\x02\x02\x02\u0185\u0183\x03\x02\x02\x02" +
		"\u0186\u0187\x07<\x02\x02\u0187\u0188\x06.\x07\x02\u0188\u0189\b.\x10" +
		"\x02\u0189`\x03\x02\x02\x02\u018A\u018B\x05\x11\x07\x02\u018B\u018C\x05" +
		"\x13\b\x02\u018C\u018D\x05\x15\t\x02\u018D\u018E\x05\r\x05\x02\u018E\u018F" +
		"\x05!\x0F\x02\u018F\u0190\x05\x1B\f\x02\u0190\u0194\x05\x1F\x0E\x02\u0191" +
		"\u0193\x05\v\x04\x02\u0192\u0191\x03\x02\x02\x02\u0193\u0196\x03\x02\x02" +
		"\x02\u0194\u0192\x03\x02\x02\x02\u0194\u0195\x03\x02\x02\x02\u0195\u0197" +
		"\x03\x02\x02\x02\u0196\u0194\x03\x02\x02\x02\u0197\u0198\x07<\x02\x02" +
		"\u0198\u0199\x06/\b\x02\u0199\u019A\b/\x11\x02\u019Ab\x03\x02\x02\x02" +
		"\u019B\u019C\x05)\x13\x02\u019C\u019D\b0\x12\x02\u019Dd\x03\x02\x02\x02" +
		"\u019E\u019F\x05\'\x12\x02\u019F\u01A0\b1\x13\x02\u01A0f\x03\x02\x02\x02" +
		"\u01A1\u01A3\n\x13\x02\x02\u01A2\u01A1\x03\x02\x02\x02\u01A3\u01A4\x03" +
		"\x02\x02\x02\u01A4\u01A5\x03\x02\x02\x02\u01A4\u01A2\x03\x02\x02\x02\u01A5" +
		"\u01A6\x03\x02\x02\x02\u01A6\u01A7\b2\x14\x02\u01A7h\x03\x02\x02\x02\u01A8" +
		"\u01AA\x05\v\x04\x02\u01A9\u01A8\x03\x02\x02\x02\u01AA\u01AB\x03\x02\x02" +
		"\x02\u01AB\u01A9\x03\x02\x02\x02\u01AB\u01AC\x03\x02\x02\x02\u01ACj\x03" +
		"\x02\x02\x02\u01AD\u01B1\t\x14\x02\x02\u01AE\u01B0\n\x13\x02\x02\u01AF" +
		"\u01AE\x03\x02\x02\x02\u01B0\u01B3\x03\x02\x02\x02\u01B1\u01AF\x03\x02" +
		"\x02\x02\u01B1\u01B2\x03\x02\x02\x02\u01B2\u01B5\x03\x02\x02\x02\u01B3" +
		"\u01B1\x03\x02\x02\x02\u01B4\u01B6\x07\x0F\x02\x02\u01B5\u01B4\x03\x02" +
		"\x02\x02\u01B5\u01B6\x03\x02\x02\x02\u01B6\u01B7\x03\x02\x02\x02\u01B7" +
		"\u01B8\x07\f\x02\x02\u01B8\u01B9\x03\x02\x02\x02\u01B9\u01BA\b4\x02\x02" +
		"\u01BAl\x03\x02\x02\x02\u01BB\u01BD\x07\x0F\x02\x02\u01BC\u01BB\x03\x02" +
		"\x02\x02\u01BC\u01BD\x03\x02\x02\x02\u01BD\u01BE\x03\x02\x02\x02\u01BE" +
		"\u01BF\x07\f\x02\x02\u01BFn\x03\x02\x02\x02\u01C0\u01C2\x05i3\x02\u01C1" +
		"\u01C0\x03\x02\x02\x02\u01C1\u01C2\x03\x02\x02\x02\u01C2\u01C3\x03\x02" +
		"\x02\x02\u01C3\u01C5\x057\x1A\x02\u01C4\u01C6\x05i3\x02\u01C5\u01C4\x03" +
		"\x02\x02\x02\u01C5\u01C6\x03\x02\x02\x02\u01C6\u01C7\x03\x02\x02\x02\u01C7" +
		"\u01C8\b6\b\x02\u01C8p\x03\x02\x02\x02\u01C9\u01CB\n\x13\x02\x02\u01CA" +
		"\u01C9\x03\x02\x02\x02\u01CB\u01CC\x03\x02\x02\x02\u01CC\u01CA\x03\x02" +
		"\x02\x02\u01CC\u01CD\x03\x02\x02\x02\u01CDr\x03\x02\x02\x02\u01CE\u01CF" +
		"\x07b\x02\x02\u01CF\u01D0\x07b\x02\x02\u01D0\u01D1\x07b\x02\x02\u01D1" +
		"\u01D2\x03\x02\x02\x02\u01D2\u01D3\b8\b\x02\u01D3t\x03\x02\x02\x02\u01D4" +
		"\u01D5\x05)\x13\x02\u01D5\u01D6\x03\x02\x02\x02\u01D6\u01D7\b9\x15\x02" +
		"\u01D7v\x03\x02\x02\x02\u01D8\u01D9\x05\'\x12\x02\u01D9\u01DA\x03\x02" +
		"\x02\x02\u01DA\u01DB\b:\x16\x02\u01DBx\x03\x02\x02\x02\u01DC\u01DE\x07" +
		"\x0F\x02\x02\u01DD\u01DC\x03\x02\x02\x02\u01DD\u01DE\x03\x02\x02\x02\u01DE" +
		"\u01DF\x03\x02\x02\x02\u01DF\u01E2\x07\f\x02\x02\u01E0\u01E2\n\x13\x02" +
		"\x02\u01E1\u01DD\x03\x02\x02\x02\u01E1\u01E0\x03\x02\x02\x02\u01E2\u01E3" +
		"\x03\x02\x02\x02\u01E3\u01E4\x03\x02\x02\x02\u01E3\u01E1\x03\x02\x02\x02" +
		"\u01E4\u01E5\x03\x02\x02\x02\u01E5\u01E6\b;\x17\x02\u01E6z\x03\x02\x02" +
		"\x02.\x02\x03\x04\x05\x06\x9D\xA5\xA9\xAF\xB1\xB8\xBE\xC1\xC8\xCD\xE4" +
		"\xED\xF7\xFC\u0106\u010B\u010D\u011B\u0120\u0129\u0134\u0141\u014F\u0157" +
		"\u0165\u0175\u0183\u0194\u01A4\u01AB\u01B1\u01B5\u01BC\u01C1\u01C5\u01CC" +
		"\u01DD\u01E1\u01E3\x18\b\x02\x02\x07\x03\x02\x03\x18\x02\x07\x04\x02\x07" +
		"\x05\x02\t\x05\x02\x06\x02\x02\t\x04\x02\x07\x06\x02\x03)\x03\x03*\x04" +
		"\x03+\x05\x03,\x06\x03-\x07\x03.\b\x03/\t\x030\n\x031\v\x032\f\t\x1C\x02" +
		"\t\x1D\x02\t\x1E\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LGFileLexer.__ATN) {
			LGFileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LGFileLexer._serializedATN));
		}

		return LGFileLexer.__ATN;
	}

}

